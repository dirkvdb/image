IF (BIICODE)
    OPTION(HAVE_JPEG "Jpeg support" ON)
    OPTION(HAVE_PNG "Png support" ON)
    SET(IMAGE_TEST_DATA_DIR ${CMAKE_CURRENT_SOURCE_DIR}/test/data)

    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/imageconfig.h.in ${CMAKE_CURRENT_BINARY_DIR}/imageconfig.h)
    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/test/imagetestconfig.h.in ${CMAKE_CURRENT_BINARY_DIR}/imagetestconfig.h)
    ADD_BII_TARGETS()

    TARGET_INCLUDE_DIRECTORIES(${BII_BLOCK_TARGET} INTERFACE ${CMAKE_CURRENT_BINARY_DIR})

    IF (APPLE)
        TARGET_COMPILE_OPTIONS(${BII_BLOCK_TARGET} INTERFACE -std=c++14 -stdlib=libc++)
    ELSEIF (WIN32 OR UNIX)
        TARGET_COMPILE_OPTIONS(${BII_BLOCK_TARGET} INTERFACE -std=c++14)
    ENDIF ()

    RETURN ()
ENDIF ()

CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
ENABLE_TESTING()

OPTION(STANDALONE "Not used as a submodule of another project" OFF)
OPTION(ENABLE_TESTS "build unit tests" ON)

FIND_PACKAGE(JPEG)
IF (JPEG_FOUND)
    OPTION(HAVE_JPEG "Jpeg support" ON)
ENDIF ()

FIND_PACKAGE(PNG)
IF (PNG_FOUND)
    OPTION(HAVE_PNG "Png support" ON)
ENDIF ()

SET (IMAGE_INCLUDE_DIRS
    "${CMAKE_CURRENT_SOURCE_DIR}/inc/"
    "${CMAKE_CURRENT_SOURCE_DIR}/../utils/inc/"
)
SET (IMAGE_LIBRARY_DIRS
    "${CMAKE_CURRENT_BINARY_DIR}"
)
SET (IMAGE_LIBRARIES
    utils
)

SET (IMAGE_SRC_LIST
    inc/image/image.h
    inc/image/imagefactory.h src/imagefactory.cpp
    inc/image/imageloadstoreinterface.h
)

IF (HAVE_JPEG)
    LIST(APPEND IMAGE_SRC_LIST src/imageloadstorejpeg.h src/imageloadstorejpeg.cpp)
    LIST(APPEND IMAGE_INCLUDE_DIRS ${JPEG_INCLUDE_DIR})
    LIST(APPEND IMAGE_LIBRARY_DIRS ${JPEG_LIBRARY_DIRS})
    LIST(APPEND IMAGE_LIBRARIES ${JPEG_LIBRARIES})
ENDIF ()

IF (HAVE_PNG)
    LIST(APPEND IMAGE_SRC_LIST src/imageloadstorepng.h src/imageloadstorepng.cpp)
    LIST(APPEND IMAGE_INCLUDE_DIRS ${PNG_INCLUDE_DIR})
    LIST(APPEND IMAGE_LIBRARY_DIRS ${PNG_LIBRARY_DIRS})
    LIST(APPEND IMAGE_LIBRARIES ${PNG_LIBRARIES})
ENDIF ()

INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR} ${IMAGE_INCLUDE_DIRS})
ADD_LIBRARY(image STATIC ${IMAGE_SRC_LIST})
TARGET_LINK_LIBRARIES(image utils ${IMAGE_LIBRARIES})

IF (STANDALONE)
    ADD_DEFINITIONS("-std=c++1y")
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")
    SET (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O1")
    ADD_DEFINITIONS("-std=c++1y")
    IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" AND APPLE)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
    ENDIF ()

    IF (CMAKE_COMPILER_IS_GNUCXX)
        SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -rdynamic")
    ENDIF ()
ENDIF ()

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/imageconfig.h.in ${CMAKE_BINARY_DIR}/imageconfig.h)

IF (ENABLE_TESTS)
    ADD_SUBDIRECTORY(test)
ENDIF ()
